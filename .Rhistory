auc_tune <- c()
# tune mtry, ntree
for(i in 1:nrow(tune_grid)){
rf_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i])
pred_tune <- predict(rf_tune, test, type = "class")
auc_tune[i] <- roc.curve(test$follow, factor(pred_tune))$auc
}
# Fit random forest
rf = randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry=mtry_best, ntree=ntree_best)
library("ROSE")
# tune: mtry, ntree, sampsize
# create tune grid
mtry <- seq(2, 7, 1)
ntree <- seq(300, 3000, 300)
tune_grid <- expand.grid(mtry=mtry, ntree=ntree)
auc_tune <- c()
# tune mtry, ntree
for(i in 1:nrow(tune_grid)){
rf_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i])
pred_tune <- predict(rf_tune, test, type = "class")
auc_tune[i] <- roc.curve(test$follow, factor(pred_tune))$auc
}
# tune: mtry, ntree, sampsize
# create tune grid
mtry <- seq(2, 7, 1)
ntree <- seq(300, 3000, 300)
tune_grid <- expand.grid(mtry=mtry, ntree=ntree)
auc_tune <- c()
# tune mtry, ntree
for(i in 1:nrow(tune_grid)){
rf_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i])
pred_tune <- predict(rf_tune, test, type = "class")
auc_tune[i] <- roc.curve(test$follow, factor(pred_tune))$auc
}
mtry_best <- tune_grid[which.min(auc_tune),]$mtry
ntree_best <- tune_grid[which.min(auc_tune),]$ntree
# Fit random forest
rf = randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry=mtry_best, ntree=ntree_best)
pred_forest = predict(rf, test, type = "class")
confusionMatrix(pred_forest, test$follow)
roc.curve(test$follow, factor(pred_forest))
# create tune grid for random forest with stratified sampling
sampsize <- round(nrow(train)*c(0.7, 0.8, 0.9))
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize=sampsize)
auc2_tune <- c()
for(i in 1:nrow(tune_grid)){
rf2_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i], sampsize = tune_grid$sampsize[i], strata = train$follow)
pred2_tune <- predict(rf2_tune, test, type = "class")
auc2_tune[i] <- roc.curve(test$follow, factor(pred2_tune))$auc
}
# create tune grid for random forest with stratified sampling
sampsize <- round(nrow(train)*c(0.7, 0.8, 0.9))
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize=sampsize)
auc2_tune <- c()
for(i in 1:nrow(tune_grid)){
rf2_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i], sampsize = tune_grid$sampsize[i])
pred2_tune <- predict(rf2_tune, test, type = "class")
auc2_tune[i] <- roc.curve(test$follow, factor(pred2_tune))$auc
}
# create tune grid for random forest with stratified sampling
sampsize <- nrow(train)*c(0.7, 0.8, 0.9)
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize=sampsize)
auc2_tune <- c()
for(i in 1:nrow(tune_grid)){
rf2_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i], sampsize = tune_grid$sampsize[i])
pred2_tune <- predict(rf2_tune, test, type = "class")
auc2_tune[i] <- roc.curve(test$follow, factor(pred2_tune))$auc
}
# create tune grid for random forest with stratified sampling
sampsize <- round(nrow(train)*c(0.7, 0.8))
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize=sampsize)
auc2_tune <- c()
for(i in 1:nrow(tune_grid)){
rf2_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i], sampsize = tune_grid$sampsize[i])
pred2_tune <- predict(rf2_tune, test, type = "class")
auc2_tune[i] <- roc.curve(test$follow, factor(pred2_tune))$auc
}
# create tune grid for random forest with stratified sampling
sampsize <- c(85,85)
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize=sampsize)
auc2_tune <- c()
for(i in 1:nrow(tune_grid)){
rf2_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i], sampsize = tune_grid$sampsize[i])
pred2_tune <- predict(rf2_tune, test, type = "class")
auc2_tune[i] <- roc.curve(test$follow, factor(pred2_tune))$auc
}
# random forest with stratified sampling
rf2 = randomForest(follow ~ Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes + Subsite2 + AJCC_7_Stage + Sex + Race,
data = train, mtry = mtry2_best, ntree = ntree2_best, sampsize = c(85,85),,strata = train$follow)
# random forest with stratified sampling
rf2 = randomForest(follow ~ Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes + Subsite2 + AJCC_7_Stage + Sex + Race,
data = train, mtry = mtry_best, ntree = ntree_best, sampsize = c(85,85),,strata = train$follow)
pred_forest2 = predict(rf2, test, type = "class")
confusionMatrix(pred_forest2, test$follow)
roc.curve(test$follow, factor(pred_forest2))
c("0"=c(70,80,90),"1"=c(40,50,60))
c(70,80,90)
# create tune grid for random forest with stratified sampling
sampsize_0 <- seq(50,90,10)
sampsize_1 <- seq(30,90,10)
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize_0=sampsize_0, sampsize_1=sampsize_1)
auc2_tune <- c()
for(i in 1:nrow(tune_grid)){
rf2_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i], sampsize = c("0"=tune_grid$sampsize_0[i], "1"=tune_grid$sampsize_1[i]))
pred2_tune <- predict(rf2_tune, test, type = "class")
auc2_tune[i] <- roc.curve(test$follow, factor(pred2_tune))$auc
}
# create tune grid for random forest with stratified sampling
sampsize_0 <- seq(50,90,10)
sampsize_1 <- seq(30,90,10)
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize_0=sampsize_0, sampsize_1=sampsize_1)
auc2_tune <- c()
for(i in 1:nrow(tune_grid)){
rf2_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i], sampsize = c(sampsize_0[i], tune_grid$sampsize_1[i]))
pred2_tune <- predict(rf2_tune, test, type = "class")
auc2_tune[i] <- roc.curve(test$follow, factor(pred2_tune))$auc
}
View(tune2_grid)
# create tune grid for random forest with stratified sampling
sampsize_0 <- seq(30,90,20)
sampsize_1 <- seq(30,90,20)
# create tune grid for random forest with stratified sampling
sampsize_0 <- seq(30,90,20)
sampsize_1 <- seq(30,90,20)
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize_0=sampsize_0, sampsize_1=sampsize_1)
auc2_tune <- c()
for(i in 1:nrow(tune_grid)){
rf2_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i], sampsize = c(sampsize_0[i], tune_grid$sampsize_1[i]))
pred2_tune <- predict(rf2_tune, test, type = "class")
auc2_tune[i] <- roc.curve(test$follow, factor(pred2_tune))$auc
}
# create tune grid for random forest with stratified sampling
sampsize_0 <- seq(30,90,20)
sampsize_1 <- seq(30,90,20)
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize_0=sampsize_0, sampsize_1=sampsize_1)
auc2_tune <- c()
for(i in 1:nrow(tune_grid)){
rf2_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i], sampsize = c(sampsize_0[i], tune_grid$sampsize_1[i]), strata = train$follow)
pred2_tune <- predict(rf2_tune, test, type = "class")
auc2_tune[i] <- roc.curve(test$follow, factor(pred2_tune))$auc
}
sampsize <- c(c(50,50), c(60,60), c(70,70))
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize=sampsize)
auc2_tune <- c()
# create tune grid for random forest with stratified sampling
sampsize_0 <- seq(30,90,20)
sampsize_1 <- seq(30,90,20)
sampsize <- c(c(50,50), c(60,60), c(70,70))
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize=sampsize)
auc2_tune <- c()
for(i in 1:nrow(tune_grid)){
rf2_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i], sampsize = tune_grid$sampsize[i], strata = train$follow)
pred2_tune <- predict(rf2_tune, test, type = "class")
auc2_tune[i] <- roc.curve(test$follow, factor(pred2_tune))$auc
}
# create tune grid for random forest with stratified sampling
sampsize_0 <- seq(30,90,20)
sampsize_1 <- seq(30,90,20)
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize_0=sampsize_0, sampsize_1=sampsize_1)
auc2_tune <- c()
for(i in 1:nrow(tune_grid)){
rf2_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i], sampsize = c(sampsize_0[i], tune_grid$sampsize_1[i]), strata = train$follow)
pred2_tune <- predict(rf2_tune, test, type = "class")
auc2_tune[i] <- roc.curve(test$follow, factor(pred2_tune))$auc
}
# create tune grid for random forest with stratified sampling
sampsize_0 <- seq(30,90,20)
sampsize_1 <- seq(30,90,20)
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize_0=sampsize_0, sampsize_1=sampsize_1)
auc2_tune <- c()
for(i in 1:nrow(tune_grid)){
rf2_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune2_grid$mtry[i], ntree = tune2_grid$ntree[i], sampsize = c(tune2_grid$sampsize_0[i], tune2_grid$sampsize_1[i]), strata = train$follow)
pred2_tune <- predict(rf2_tune, test, type = "class")
auc2_tune[i] <- roc.curve(test$follow, factor(pred2_tune))$auc
}
mtry2_best <- tune_grid[which.max(auc2_tune),]$mtry
ntree2_best <- tune_grid[which.max(auc2_tune),]$ntree
sampsize2_best <- tune_grid[which.max(auc2_tune),]$sampsize
sampsize0_best <- tune_grid[which.max(auc2_tune),]$sampsize_0
sampsize1_best <- tune_grid[which.max(auc2_tune),]$sampsize_1
# create tune grid for random forest with stratified sampling
sampsize_0 <- seq(50,90,10)
sampsize_1 <- seq(50,90,10)
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize_0=sampsize_0, sampsize_1=sampsize_1)
auc2_tune <- c()
for(i in 1:nrow(tune_grid)){
rf2_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune2_grid$mtry[i], ntree = tune2_grid$ntree[i], sampsize = c(tune2_grid$sampsize_0[i], tune2_grid$sampsize_1[i]), strata = train$follow)
pred2_tune <- predict(rf2_tune, test, type = "class")
auc2_tune[i] <- roc.curve(test$follow, factor(pred2_tune))$auc
}
mtry2_best <- tune_grid[which.max(auc2_tune),]$mtry
ntree2_best <- tune_grid[which.max(auc2_tune),]$ntree
sampsize0_best <- tune_grid[which.max(auc2_tune),]$sampsize_0
sampsize1_best <- tune_grid[which.max(auc2_tune),]$sampsize_1
auc2_tune <- c()
# create tune grid for random forest with stratified sampling
sampsize_0 <- seq(50,90,10)
sampsize_1 <- seq(50,90,10)
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize_0=sampsize_0, sampsize_1=sampsize_1)
auc2_tune <- c()
for(i in 1:nrow(tune2_grid)){
rf2_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune2_grid$mtry[i], ntree = tune2_grid$ntree[i], sampsize = c(tune2_grid$sampsize_0[i], tune2_grid$sampsize_1[i]), strata = train$follow)
pred2_tune <- predict(rf2_tune, test, type = "class")
auc2_tune[i] <- roc.curve(test$follow, factor(pred2_tune))$auc
}
# Fit random forest
rf = randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry=mtry_best, ntree=ntree_best)
pred_forest = predict(rf, test, type = "class")
confusionMatrix(pred_forest, test$follow)
auc(test$follow, factor(pred_forest))
auc(roc(test$follow, factor(pred_forest)))
auc(roc=roc(test$follow, factor(pred_forest)))
pROC::auc(roc(test$follow, factor(pred_forest)))
# Fit random forest
rf = randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry=mtry_best, ntree=ntree_best)
pred_forest = predict(rf, test, type = "class")
confusionMatrix(pred_forest, test$follow)
roc_obj <- roc(test$follow, factor(pred_forest))
roc_obj <- roc(test$follow, pred_forest)
roc_obj <- roc(test$follow, factor(pred_forest))
?myroc
View(test)
roc_obj <- roc(test[,-17], factor(pred_forest))
roc_obj <- roc(test, factor(pred_forest))
pred_df <- cbind(test[,-17], factor(pred_forest))
roc_obj <- roc(pred_df)
roc_obj <- roc(pred_df$`factor(pred_forest)`)
roc_obj <- roc(test$follow, factor(pred_forest))
# Fit random forest
rf = randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry=mtry_best, ntree=ntree_best)
pred_forest = predict(rf, test, type = "class")
confusionMatrix(pred_forest, test$follow)
roc.curve(test$follow, factor(pred_forest))
# create tune grid for random forest with stratified sampling
sampsize_0 <- seq(50,90,10)
sampsize_1 <- seq(50,90,10)
tune2_grid <- expand.grid(mtry=mtry, ntree=ntree, sampsize_0=sampsize_0, sampsize_1=sampsize_1)
auc2_tune <- c()
for(i in 1:nrow(tune2_grid)){
rf2_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune2_grid$mtry[i], ntree = tune2_grid$ntree[i], sampsize = c(tune2_grid$sampsize_0[i], tune2_grid$sampsize_1[i]), strata = train$follow)
pred2_tune <- predict(rf2_tune, test, type = "class")
auc2_tune[i] <- roc.curve(test$follow, factor(pred2_tune))$auc
}
mtry2_best <- tune_grid[which.max(auc2_tune),]$mtry
ntree2_best <- tune_grid[which.max(auc2_tune),]$ntree
sampsize0_best <- tune_grid[which.max(auc2_tune),]$sampsize_0
sampsize1_best <- tune_grid[which.max(auc2_tune),]$sampsize_1
view(auc2_tune)
view(auc2_tune)
auc2_tune
temp <- auc2_tune
view(temp)
View(rf_tune)
View(temp)
which.max(temp)
tune2_trid[1318]
tune2_grid[,1318]
tune2_grid[1318,]
mtry2_best <- tune2_grid[which.max(auc2_tune),]$mtry
ntree2_best <- tune2_grid[which.max(auc2_tune),]$ntree
sampsize0_best <- tune2_grid[which.max(auc2_tune),]$sampsize_0
sampsize1_best <- tune2_grid[which.max(auc2_tune),]$sampsize_1
# random forest with stratified sampling
rf2 = randomForest(follow ~ Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes + Subsite2 + AJCC_7_Stage + Sex + Race,
data = train, mtry = mtry2_best, ntree = ntree2_best, sampsize = c(sampsize0_best, sampsize1_best),strata = train$follow)
pred_forest2 = predict(rf2, test, type = "class")
confusionMatrix(pred_forest2, test$follow)
roc.curve(test$follow, factor(pred_forest2))
tune_grid[which.max(auc_tune),]
tune_grid[which.max(auc_tune),]$ntree
# tune: mtry, ntree, sampsize
# create tune grid
mtry <- seq(2, 7, 1)
ntree <- seq(100, 3100, 500)
tune_grid <- expand.grid(mtry=mtry, ntree=ntree)
auc_tune <- c()
# tune mtry, ntree
for(i in 1:nrow(tune_grid)){
rf_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i])
pred_tune <- predict(rf_tune, test, type = "class")
auc_tune[i] <- roc.curve(test$follow, factor(pred_tune))$auc
}
mtry_best <- tune_grid[which.max(auc_tune),]$mtry
ntree_best <- tune_grid[which.max(auc_tune),]$ntree
tune_grid[which.max(auc_tune),]
# tune: mtry, ntree, sampsize
# create tune grid
mtry <- seq(2, 7, 1)
ntree <- seq(10, 300, 50)
tune_grid <- expand.grid(mtry=mtry, ntree=ntree)
auc_tune <- c()
# tune mtry, ntree
for(i in 1:nrow(tune_grid)){
rf_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i])
pred_tune <- predict(rf_tune, test, type = "class")
auc_tune[i] <- roc.curve(test$follow, factor(pred_tune))$auc
}
mtry_best <- tune_grid[which.max(auc_tune),]$mtry
ntree_best <- tune_grid[which.max(auc_tune),]$ntree
tune_grid[which.max(auc_tune),]
# tune: mtry, ntree, sampsize
# create tune grid
mtry <- seq(2, 7, 1)
ntree <- seq(300, 3000, 300)
tune_grid <- expand.grid(mtry=mtry, ntree=ntree)
auc_tune <- c()
# tune mtry, ntree
for(i in 1:nrow(tune_grid)){
rf_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i])
pred_tune <- predict(rf_tune, test, type = "class")
auc_tune[i] <- roc.curve(test$follow, factor(pred_tune))$auc
}
# tune: mtry, ntree, sampsize
# create tune grid
mtry <- seq(2, 7, 1)
ntree <- seq(500, 3000, 500)
tune_grid <- expand.grid(mtry=mtry, ntree=ntree)
auc_tune <- c()
# tune mtry, ntree
for(i in 1:nrow(tune_grid)){
rf_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i])
pred_tune <- predict(rf_tune, test, type = "class")
auc_tune[i] <- roc.curve(test$follow, factor(pred_tune))$auc
}
mtry_best <- tune_grid[which.max(auc_tune),]$mtry
ntree_best <- tune_grid[which.max(auc_tune),]$ntree
tune_grid[which.max(auc_tune),]
# tune: mtry, ntree, sampsize
# create tune grid
mtry <- seq(2, 7, 1)
ntree <- seq(300, 3000, 300)
tune_grid <- expand.grid(mtry=mtry, ntree=ntree)
auc_tune <- c()
# tune mtry, ntree
for(i in 1:nrow(tune_grid)){
rf_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i])
pred_tune <- predict(rf_tune, test, type = "class")
auc_tune[i] <- roc.curve(test$follow, factor(pred_tune))$auc
}
mtry_best <- tune_grid[which.max(auc_tune),]$mtry
ntree_best <- tune_grid[which.max(auc_tune),]$ntree
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse,readxl,tree,randomForest,caret)
qplot(data$Site)
qplot(data$Site)+coord_flip()
qplot(sali$Race, color=sali$follow)
qplot(sali$Race, color=factor(sali$follow))
qplot(sali$Race, fill=factor(sali$follow))
qplot(sali$Race, fill=factor(sali$follow))+coord_flip()
qplot(sali$Race2, fill=factor(sali$follow))+coord_flip()
qplot(sali$Insurance2, fill=factor(sali$follow))+coord_flip()
qplot(sali$Insurance2, fill=factor(sali$follow))
qplot(sali$Insurance2, fill=factor(sali$follow, binwidth=50))
qplot(sali$Insurance2, fill=factor(sali$follow, binwidth=30))
qplot(sali$Insurance2, fill=factor(sali$follow, bins=2))
qplot(sali$Insurance2, fill=factor(sali$follow), binwidth=50)
qplot(sali$Insurance2, fill=factor(sali$follow), binwidth=30)
qplot(sali$Insurance2, fill=factor(sali$follow), binwidth=20)
qplot(sali$Insurance2, fill=factor(sali$follow), binwidth=10)
qplot(sali$Insurance2, fill=factor(sali$follow))
write.csv(sali, "sali.csv")
varImpPlot(rf,type=2)
colnames(data)
colnames(train)
# Fit random forest
rf = randomForest(follow ~  Sex + Race2 + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry=mtry_best, ntree=ntree_best)
# Fit random forest
rf = randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry=mtry_best, ntree=ntree_best)
pred_forest = predict(rf, test, type = "class")
confusionMatrix(pred_forest, test$follow)
roc.curve(test$follow, factor(pred_forest))
varImpPlot(rf,type=2)
View(train)
#surgery decision, performed, radiation,  chemo, Mets, subsite, ID.
trainsali <- sali[,-c(1,15,16,20:25)]
trainsali$follow <- as.factor(trainsali$follow)
trainsali$Sex <- as.factor(trainsali$Sex)
trainsali$Year_of_Diagnosis <- as.factor(trainsali$Year_of_Diagnosis)
trainsali$Race <- as.factor(trainsali$Race)
trainsali$Insurance <- as.factor(trainsali$Insurance)
trainsali$AJCC_7_Stage <- as.factor(trainsali$AJCC_7_Stage )
trainsali$SEER_Registry <- as.factor(trainsali$SEER_Registry)
trainsali$White <- factor(ifelse(trainsali$Race=="White", 1, 0))
set.seed(123)
getColUni <- function(x){
length(unique(x))
}
getSample <- function(data){
repeat{
sample <-createDataPartition(y=data$follow,p=0.7,list=FALSE)
train <- data[sample, ]
# length(train$follow)-sum(train$follow==1)
# test <- data[-sample, ]
# length(test$follow)-sum(test$follow==1)
dataCat <- select_if(data,negate(is.numeric))
trainCat <- select_if(train,negate(is.numeric))
if(all(rapply(dataCat, getColUni)[-c(1,ncol(dataCat))]== rapply(trainCat, getColUni)[-c(1,ncol(trainCat))])) break
}
return(sample)
}
sample <- getSample(trainsali)
train <- trainsali[sample,]
test <- trainsali[-sample,]
# Fit random forest
rf = randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry=mtry_best, ntree=ntree_best)
pred_forest = predict(rf, test, type = "class")
confusionMatrix(pred_forest, test$follow)
roc.curve(test$follow, factor(pred_forest))
varImpPlot(rf,type=2)
# Fit random forest
rf = randomForest(follow ~  Sex + White + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry=mtry_best, ntree=ntree_best)
pred_forest = predict(rf, test, type = "class")
confusionMatrix(pred_forest, test$follow)
roc.curve(test$follow, factor(pred_forest))
varImpPlot(rf,type=2)
tune_grid[which.max(auc_tune),]
# Fit random forest
rf = randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry=mtry_best, ntree=ntree_best)
pred_forest = predict(rf, test, type = "class")
confusionMatrix(pred_forest, test$follow)
roc.curve(test$follow, factor(pred_forest))
varImpPlot(rf,type=2)
# tune: mtry, ntree, sampsize
# create tune grid
mtry <- seq(2, 7, 1)
ntree <- seq(300, 3000, 300)
tune_grid <- expand.grid(mtry=mtry, ntree=ntree)
auc_tune <- c()
# tune mtry, ntree
for(i in 1:nrow(tune_grid)){
rf_tune <- randomForest(follow ~  Sex + Race + Year_of_Diagnosis + Age_at_Diagnosis + Insurance2 + Lymph_Nodes+ Subsite2 + AJCC_7_Stage, data = train, mtry = tune_grid$mtry[i], ntree = tune_grid$ntree[i])
pred_tune <- predict(rf_tune, test, type = "class")
auc_tune[i] <- roc.curve(test$follow, factor(pred_tune))$auc
}
mtry_best <- tune_grid[which.max(auc_tune),]$mtry
ntree_best <- tune_grid[which.max(auc_tune),]$ntree
tune_grid[which.max(auc_tune),]
setwd("~/Downloads/MSSP/679/MA679_project")
# create tune grid for random forest with stratified sampling
##race
ggplot(data=sali)+geom_histogram(mapping=aes(x=Race,fill=as.factor(follow)),stat='count',position = 'dodge')+coord_flip()
confusionMatrix(pred_forest, test$follow)
conf_mat(pred_forest, test$follow)
library("yardstick")
install.packages("yardstick")
library("yardstick")
conf_mat(pred_forest, test$follow)
conf_mat(factor(pred_forest), factor(test$follow))
conf_mat(pred_forest, factor(test$follow))
conf_mat(pred_forest, test$follow)
conf_mat(data=test,truth=pred_forest, estimate=test$follow)
cm <- cbind(predicted=factor(pred_forest), actual=factor(test$follow))
cm_df <- cbind(predicted=factor(pred_forest), actual=factor(test$follow))
cm <- conf_mat(data=cm_df,truth=actual, estimate=predicted)
table(cpred_forest, test$follow)
table(pred_forest, test$follow)
temp <- table(pred_forest, test$follow)
cm_df <- table(predicted=factor(pred_forest), actual=factor(test$follow))
cm <- conf_mat(data=cm_df,truth=actual, estimate=predicted)
cm_df <- as.dataframe(table(predicted=factor(pred_forest), actual=factor(test$follow)))
cm_df <- dataframe(table(predicted=factor(pred_forest), actual=factor(test$follow)))
cm_df <- as.data.frame.matrix(table(predicted=factor(pred_forest), actual=factor(test$follow)))
cm <- conf_mat(data=cm_df,truth=actual, estimate=predicted)
View(cm_df)
cm_df <- as.data.frame.matrix(table(pred_forest, test$follow))
names(cm_df) <- c("Predicted", "Actual")
cm_df <- as.data.frame.matrix(table(pred_forest, test$follow))
cm <- conf_mat(data=cm_df)
cm <- conf_mat(cm_df)
autoplot(cm_df)
fourfoldplot(table(pred_forest, test$follow), color = c("#CC6666", "#99CC99"),
conf.level = 0, margin = 1, main = "Confusion Matrix")
fourfoldplot(table(pred_forest, test$follow), color = c("orange", "blue"),
conf.level = 0, margin = 1, main = "Confusion Matrix")
fourfoldplot(table(pred_forest, test$follow), color = c("#CC6666", "#99CC99"),
conf.level = 0, margin = 1, main = "Confusion Matrix")
View(data)
set.seed(1)
test2 <- rep(NA,10000)
for ( i in 1:10000) {
a <- runif(10000)
test2[i] <- max(a[a!=max(a)])
}
hist(test2)
plot(density(test2))
ks.test(test2,"pnorm")
ks.test(test2,"punif")
?runif
library(knitr)
library(kableExtra)
library(knitr)
library(kableExtra)
install.packages("kableExtra")
pacman::p_load(knitr, kableExtra, tidyverse)
## opts_chunk$set(echo = TRUE)
L <- c(0,5,1,3,3,2)
dim(L)<- c(2,3)
L_tab <- L
colnames(L_tab) <- paste0("a", 1:3)
rownames(L_tab) <- paste0("theta", 1:2)
kable(L_tab)
L <- c(3,3,3,10,4,1)
dim(L)<- c(2,3)
L_tab <- L
colnames(L_tab) <- paste0("a", 1:2)
View(L)
L <- c(3,3,3,10,4,1)
dim(L)<- c(3,2)
L_tab <- L
colnames(L_tab) <- paste0("a", 1:2)
rownames(L_tab) <- paste0("theta", 1:3)
kable(L_tab)
